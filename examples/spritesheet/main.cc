#include <types.h>
#include <gba.h>
#include <random.h>

// graphics.cc
void setup_display() {
  /**
   * Mode 0 is a tile/map-based mode with no rotation/scaling and supports up
   * to 4 layers.
   *
   * 1D object mapping means each 8x8 sprite piece is put side-by-side in the
   * spritesheet. There are 1024 8x8 sprite pieces per spritesheet.
   */
  *REG_DISPCNT =
    (0b000 << 0)  | // Video Mode 0
    (0b0   << 3)  | // GBA
    (0b0   << 4)  | // Unused in Mode 0
    (0b0   << 5)  | // No access to OAM in H-Blank
    (0b1   << 6)  | // 1D Object Mapping
    (0b0   << 7)  | // No fast access to VRAM,Palette,OAM
    (0b1   << 8)  | // BG 0 enable flag
    (0b1   << 9)  | // BG 1 enable flag
    (0b0   << 10) | // BG 2 enable flag
    (0b0   << 11) | // BG 3 enable flag
    (0b1   << 12) | // OBJ enable flag
    (0b0   << 13) | // Window 0 display flag
    (0b0   << 14) | // Window 1 display flag
    (0b0   << 15) // OBJ window display flag
  ;

  /**
   * Background 0 configuration.
   *
   * Single background, 16 colors color map, 32x32 tiles, tiles are 8x8 pixels each.
   */
  *REG_BG0CNT =
    (0b00    << 0)  | // Priority 0 (Highest)
    (0b01    << 2)  | // Start addr of tile data 0x06000000 + S * 0x4000
    (0b00    << 4)  | // Unused
    (0b0     << 6)  | // Mosaic effect 0 (Off)
    (0b0     << 7)  | // Use 16 color map
    (0b00000 << 8)  | // Starting addr of tile map 0x06000000 + M * 0x800
    (0b0     << 13) | // Screen over / RO
    (0b00    << 14)   // Size of tile map entries. 0 means 256x256 pixels (32x32 tiles)
  ;

  /**
   * Background 1 configuration.
   *
   * Single background, 16 colors color map, 32x32 tiles, tiles are 8x8 pixels each.
   */
  *REG_BG1CNT =
    (0b01    << 0)  | // Priority 1
    (0b01    << 2)  | // Start addr of tile data 0x06000000 + S * 0x4000
    (0b00    << 4)  | // Unused
    (0b0     << 6)  | // Mosaic effect 0 (Off)
    (0b0     << 7)  | // Use 16 color map
    (0b00001 << 8)  | // Starting addr of tile map 0x06000000 + M * 0x800
    (0b0     << 13) | // Screen over / RO
    (0b00    << 14)   // Size of tile map entries. 0 means 256x256 pixels (32x32 tiles)
  ;
}

void setup_spritesheet() {
  #include <spritesheet_chicken.inc>
  for (u16_t i = 0; i < PALETTE_SIZE; ++i) {
    OBJ_PALETTE[i] = PALETTE[i];
  }
  for (u16_t i = 0; i < TILESET_SIZE; ++i) {
    OBJ_TILES[i] = TILESET[i];
  }
}

void setup_bg0_tileset() {
  #include <spritesheet_bg.inc>
  static auto const TILESET_PTR = (volatile u16_t*)(0x06000000 + 1 * 0x4000);
  for (u16_t i = 0; i < PALETTE_SIZE; ++i) {
    BG_PALETTE[i] = PALETTE[i];
  }
  for (u16_t i = 0; i < TILESET_SIZE; i++) {
      TILESET_PTR[i] = TILESET[i];
  }
}

void setup_tilemap_bg0() {
  static auto const TILEMAP_PTR = (volatile u16_t*)(0x06000000 + 0 * 0x800);
  u16_t tilemap[32 * 32] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,232,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,254,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,1,2,3,3,3,3,3,4,5,234,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,22,46,46,46,46,46,46,26,27,256,257,138,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,44,46,46,46,46,46,46,48,49,6,7,160,161,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,44,26,46,70,46,46,46,26,49,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,44,89,46,46,46,46,46,48,49,50,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,44,45,46,46,46,92,46,46,49,94,95,0,0,0,0,232,233,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,44,46,46,46,46,46,46,46,49,116,117,0,0,0,0,254,255,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,44,46,46,45,46,46,46,46,105,3,3,3,3,3,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,44,26,46,48,46,46,46,46,23,46,46,46,46,46,46,26,27,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,44,46,46,46,46,46,46,92,46,46,92,46,46,46,46,46,49,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,88,89,46,46,46,46,46,46,46,46,46,46,46,46,92,46,49,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,110,111,112,112,112,112,112,78,46,46,46,46,45,46,46,46,49,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,44,46,46,89,46,46,46,46,46,49,234,235,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,182,183,0,0,44,46,46,46,46,46,46,92,46,49,256,257,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,204,205,180,181,44,46,46,70,90,46,46,46,46,49,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,138,139,202,203,88,89,46,46,46,46,46,46,92,93,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,160,161,0,0,110,111,113,113,113,113,113,113,114,115,0,138,139,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,161,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  };
  for (u16_t i = 0; i < 32 * 32; ++i) {
      TILEMAP_PTR[i] = tilemap[i];
  }
}

void setup_tilemap_bg1() {
  static auto const TILEMAP_PTR = (volatile u16_t*)(0x06000000 + 1 * 0x800);
  u16_t tilemap[32 * 32] = {
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,
276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,276,277,278,279,280,281,282,283,
298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305,298,299,300,301,302,303,304,305
  };
  for (u16_t i = 0; i < 32 * 32; ++i) {
      TILEMAP_PTR[i] = tilemap[i];
  }
}

void setup_graphics() {
  setup_display();
  setup_spritesheet();
  setup_bg0_tileset();
  setup_tilemap_bg0();
  setup_tilemap_bg1();
}

// random.cc
static u16_t seed = 0x1abf;
u16_t my_rand() { seed = rand(seed); return seed; }

// chicken.cc
enum class ChickenState {
  IDLE = 0,
  WALKING = 1,
};
static ChickenState state = ChickenState::IDLE;
static u16_t current_sprite = 3;
static u16_t frame_timeout = 8; // frames
static u16_t x = 110;
static u16_t y = 90;
static u16_t thinking_timeout = 128;
u16_t frame_timeout_for(ChickenState const& s) {
  switch (s) {
    case ChickenState::IDLE:
      return 32;
    case ChickenState::WALKING:
      return 16;
  }
}

u16_t next_sprite(ChickenState s, u16_t c_sprite) {
  switch (s) {
    case ChickenState::IDLE:
      switch (c_sprite) {
        case 1: return 2;
        case 2: return 1;
        default: return 1;
      }
      break;
    case ChickenState::WALKING:
      switch (c_sprite) {
        case 3: return 4;
        case 4: return 5;
        case 5: return 6;
        case 6: return 3;
        default: return 3;
      }
      break;
  }
  return 0;
}

void update_oam() {
  // set_obj_sprite(0, current_sprite);
  auto* obj = OAM_attr::get_obj(0);
  obj->set_sprite(OAM_attr::step16x16(current_sprite));
  obj->set_x(x);
  obj->set_y(y);
  obj->set_size(OAM_attr::ObjectSize::_16x16);
}

void update_sprites() {
  thinking_timeout -= 1;
  if (thinking_timeout == 0) {
    if (my_rand() & 0x1) {
      state = ChickenState::WALKING;
    } else {
      state = ChickenState::IDLE;
    }
    thinking_timeout = 128;
  }

  frame_timeout -= 1;
  if (frame_timeout != 0) {
    return;
  }

  frame_timeout = frame_timeout_for(state);
  current_sprite = next_sprite(state, current_sprite);

  if (state == ChickenState::WALKING) {
    x += 1;
  }

  update_oam();
}

static const u16_t BG_FRAME_TIME = 64;
u16_t bg_frame_timeout = BG_FRAME_TIME;
void update_bg() {
  bg_frame_timeout--;
  if (bg_frame_timeout == 0) {
    *REG_BG1HOFS += 1;
    bg_frame_timeout = BG_FRAME_TIME;
  } else if (bg_frame_timeout == BG_FRAME_TIME / 2) {
    *REG_BG1HOFS -= 1;
  }
}

int main() {
  setup_graphics();

  u16_t frame_counter = 0;
  while (1) {
    vid_vsync();
    update_bg();
    update_sprites();
  }
}

